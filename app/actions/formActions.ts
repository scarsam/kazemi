"use server";

import { GoogleSpreadsheet } from "google-spreadsheet";
import { JWT } from "google-auth-library";
import { revalidatePath } from "next/cache";

export async function createRow(_: any, formData: FormData) {
  try {
    // Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
    const serviceAccountAuth = new JWT({
      // env var values here are copied from service account credentials generated by google
      // see "Authentication" section in docs for more info
      email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
      key: process.env.GOOGLE_PRIVATE_KEY,
      scopes: ["https://www.googleapis.com/auth/spreadsheets"],
    });

    const doc = new GoogleSpreadsheet(
      "1rPqPAd_Jr98EZWaVphhWb4Fi81Tpc0zntJOsm6EUp_k",
      serviceAccountAuth
    );

    await doc.loadInfo(); // loads document properties and worksheets
    const sheet = doc.sheetsById[898706516]; // accessible via ID if you already know it

    type Row = Record<string, any>;

    let rows: Row[] = [];

    for (const [compositeKey, value] of formData.entries()) {
      const [header, key] = compositeKey.split("-");

      // Find the index of the row object based on the key
      let index = rows.findIndex((row) => row.key === key);

      if (index === -1) {
        // If the key doesn't exist, create a new object
        rows.push({ key, [header]: value });
      } else {
        // If the key exists, update the existing object
        rows[index][header] = value;
      }
    }

    await sheet.addRows(rows);

    return { message: 'success' }
  } catch (err) {
    console.error(err);
    return { message: 'failure' }
  }
}
